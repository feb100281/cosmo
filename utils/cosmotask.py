#This is the script for initial data import 

import pandas as pd
import numpy as np
from sqlalchemy import create_engine
import pymysql

config = {
    'user': 'root',       # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MySQL
    'password': '',      # –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MySQL
    'host': '127.0.0.1',  # –•–æ—Å—Ç (–ª–æ–∫–∞–ª—å–Ω—ã–π)
    'database': 'cosmo',     # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
}

conn = pymysql.connect(**config)
cur = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è SQLAlchemy
connection_string = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ SQLAlchemy
engine = create_engine(connection_string)

#conn = sqlite3.connect('cosmo.db')

files = [
         '/Users/pavelustenko/Downloads/2021.xlsx',
         '/Users/pavelustenko/Downloads/2022.xlsx',
         '/Users/pavelustenko/Downloads/2025.xlsx',
         '/Users/pavelustenko/Downloads/2024 (1).xlsx',
         '/Users/pavelustenko/Downloads/2023 (1).xlsx'         
         ]

stores = ['–§—ç—à–Ω –•–∞—É—Å','–†–∏–≥–∞–ú–æ–ª–ª','–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏','–ö–∞–ø–∏—Ç–æ–ª–∏–π –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ','–ï–≤—Ä–æ–ø–∞—Ä–∫','–ì–∞—Ä–¥–µ–Ω –°–∏—Ç–∏','–¢–í–ò–ù–°–¢–û–†','–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–¥–∞–∂–∏',
          '–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–∫–∞–∑–æ–≤','–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏','–†–∏–≤–µ—Ä –•–∞—É—Å', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è', 
          '–§–†–Ø–ó–ò–ù–û', '–û–§–ò–°', '–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π','–ù–∞—Ö–∏–º–æ–≤—Å–∫–∏–π','B2B: –î–∏–ª–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏','B2B: –ü—Ä–æ—á–µ–µ','–†–∏–≥–∞–ú–æ–ª–ª 3 —ç—Ç–∞–∂']

pattern = '|'.join(stores)  

def make_db():
    combine = pd.DataFrame()
    for file in files:
        df = pd.read_excel(file, skiprows=9, skipfooter=1)
        df = df[df['all'].notna()]
        
        df['parsed_date'] = pd.to_datetime(df['all'], format='%d.%m.%Y', errors='coerce')
        df['date'] = df['parsed_date'].ffill()
        df = df[df['parsed_date'].isna()]
        
        df['store'] = np.where(df['all'].str.contains(pattern, na=False), df['all'], np.nan)
        df['store'] = df['store'].bfill()

        # item ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        df['item'] = np.where(df['all'].str.contains(pattern, na=False), np.nan, df['all'])
        df['item'] = df['item'].ffill()

        # üî• –û—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ 'all' ‚â† –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞–≥–∞–∑–∏–Ω–∞
        df = df[~df['all'].isin(stores)]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞
        last_words = df['item'].str.split().str[-1]
        mask = last_words.str.match(r'.*[A-Z\d]$', case=True)
        df['article'] = np.where(mask, last_words, '')
        df['name'] = df.apply(lambda row: row['item'].replace(row['article'], '').strip(), axis=1)

        try:
            df = df[['date','item','name','article','store','quant','amount','amount_undisc',
                     'discount_auto','discount_design','quant_base','wieght_base','volume_base',
                     'discount_amount','discount_percent_auto','discount_percent_design','diccount_percent']]
        except KeyError as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {e}")
            continue

        combine = pd.concat([combine, df], ignore_index=True)

    return combine

def make_dayly():
    combine = pd.DataFrame()
    for file in files:
        df = pd.read_excel(file, skiprows=9, skipfooter=1)
        df = df[df['all'].notna()]
        df['parsed_date'] = pd.to_datetime(df['all'], format='%d.%m.%Y', errors='coerce')
        df = df[df['parsed_date'].notna()] 
        
        df = df[['parsed_date','quant','amount']]     
        
        combine = pd.concat([combine, df], ignore_index=True)
    return combine


df = make_dayly()
df.to_sql('daily_db',if_exists='replace',index=False,con=engine)

df = make_db()
#df.to_excel('norm.xlsx')
df.to_sql('sales_db',if_exists='replace',index=False,con=engine)